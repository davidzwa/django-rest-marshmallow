{
    "docs": [
        {
            "location": "/", 
            "text": "django-rest-marshmallow\n\n\nMarshmallow schemas for Django REST framework\n\n\n\n\nOverview\n\n\nMarshmallow schemas for Django REST framework\n\n\nRequirements\n\n\n\n\nPython (2.7, 3.3, 3.4)\n\n\nDjango (1.6, 1.7)\n\n\n\n\nInstallation\n\n\nInstall using \npip\n...\n\n\n$ pip install django-rest-marshmallow\n\n\n\n\nExample\n\n\nDefine your schemas as you would with marshmallow, but importing the \nSchema\n class from \nrest_marshmallow\n instead.\n\n\nfrom rest_marshmallow import Schema, fields\n\nclass CustomerSchema(Schema):\n    name = fields.String()\n    email = fields.Email()\n    created_at = fields.DateTime()\n\n\n\nThe Schema class has the same interface as a Django REST framework serializer, so you can use it in your generic views...\n\n\nserializer_class = CustomerSerializer\n\n\n\nOr use the serializer API directly, for either serialization...\n\n\nserializer = CustomerSerializer(queryset, many=True)\nreturn Response(serializer.data)\n\n\n\nOr for validation...\n\n\nserializer = CustomerSerializer(data=request.data)\nserializer.is_valid(raise_exception=True)\nserializer.validated_data\n\n\n\nInstance create and update\n\n\nIf you want to support \nserializer.save()\n you'll need to define the \n.create()\n and/or \n.update()\n methods explicitly.\n\n\nclass CustomerSchema(Schema):\n    name = fields.String()\n    email = fields.Email()\n    created_at = fields.DateTime()\n\n    def create(self, validated_data):\n        return Customer.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        for key, value in validated_data.items():\n            setattr(instance, key, value)\n        instance.save()\n        return instance\n\n\n\nYou can now use \n.save()\n from your view code\u2026\n\n\nserializer = CustomerSerializer(data=request.data)\nserializer.is_valid(raise_exception=True)\nserializer.save()\nreturn Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n\n\n\nYou should use these methods instead of overriding the \nmake_object()\n marshmallow method.\n\n\n\n\nNested representations\n\n\nFor nested representations, use marshmallow's standard \nNested\n field as usual.\n\n\nfrom rest_marshmallow import fields, Schema\n\nclass ArtistSchema(Schema):\n    name = fields.String()\n\nclass AlbumSchema(Schema):\n    title = fields.String()\n    release_date = fields.Date()\n    artist = fields.Nested(ArtistSchema)\n\n\n\nExcluding fields\n\n\nThe marshmallow \nonly\n and \nexclude\n arguments are also valid as serializer arguments:\n\n\nserializer = CustomerSerializer(queryset, many=True, only=('name', 'email'))\nreturn Response(serializer.data)\n\n\n\nTesting\n\n\nInstall testing requirements.\n\n\n$ pip install -r requirements.txt\n\n\n\n\nRun with runtests.\n\n\n$ ./runtests.py\n\n\n\n\nYou can also use the excellent \ntox\n testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run:\n\n\n$ tox\n\n\n\n\nDocumentation\n\n\nTo build the documentation, you'll need to install \nmkdocs\n.\n\n\n$ pip install mkdocs\n\n\n\n\nTo preview the documentation:\n\n\n$ mkdocs serve\nRunning at: http://127.0.0.1:8000/\n\n\n\n\nTo build the documentation:\n\n\n$ mkdocs build", 
            "title": "Home"
        }, 
        {
            "location": "/#django-rest-marshmallow", 
            "text": "Marshmallow schemas for Django REST framework", 
            "title": "django-rest-marshmallow"
        }, 
        {
            "location": "/#overview", 
            "text": "Marshmallow schemas for Django REST framework", 
            "title": "Overview"
        }, 
        {
            "location": "/#requirements", 
            "text": "Python (2.7, 3.3, 3.4)  Django (1.6, 1.7)", 
            "title": "Requirements"
        }, 
        {
            "location": "/#installation", 
            "text": "Install using  pip ...  $ pip install django-rest-marshmallow", 
            "title": "Installation"
        }, 
        {
            "location": "/#example", 
            "text": "Define your schemas as you would with marshmallow, but importing the  Schema  class from  rest_marshmallow  instead.  from rest_marshmallow import Schema, fields\n\nclass CustomerSchema(Schema):\n    name = fields.String()\n    email = fields.Email()\n    created_at = fields.DateTime()  The Schema class has the same interface as a Django REST framework serializer, so you can use it in your generic views...  serializer_class = CustomerSerializer  Or use the serializer API directly, for either serialization...  serializer = CustomerSerializer(queryset, many=True)\nreturn Response(serializer.data)  Or for validation...  serializer = CustomerSerializer(data=request.data)\nserializer.is_valid(raise_exception=True)\nserializer.validated_data  Instance create and update  If you want to support  serializer.save()  you'll need to define the  .create()  and/or  .update()  methods explicitly.  class CustomerSchema(Schema):\n    name = fields.String()\n    email = fields.Email()\n    created_at = fields.DateTime()\n\n    def create(self, validated_data):\n        return Customer.objects.create(**validated_data)\n\n    def update(self, instance, validated_data):\n        for key, value in validated_data.items():\n            setattr(instance, key, value)\n        instance.save()\n        return instance  You can now use  .save()  from your view code\u2026  serializer = CustomerSerializer(data=request.data)\nserializer.is_valid(raise_exception=True)\nserializer.save()\nreturn Response(serializer.data, status=status.HTTP_201_CREATED)   You should use these methods instead of overriding the  make_object()  marshmallow method.   Nested representations  For nested representations, use marshmallow's standard  Nested  field as usual.  from rest_marshmallow import fields, Schema\n\nclass ArtistSchema(Schema):\n    name = fields.String()\n\nclass AlbumSchema(Schema):\n    title = fields.String()\n    release_date = fields.Date()\n    artist = fields.Nested(ArtistSchema)  Excluding fields  The marshmallow  only  and  exclude  arguments are also valid as serializer arguments:  serializer = CustomerSerializer(queryset, many=True, only=('name', 'email'))\nreturn Response(serializer.data)", 
            "title": "Example"
        }, 
        {
            "location": "/#testing", 
            "text": "Install testing requirements.  $ pip install -r requirements.txt  Run with runtests.  $ ./runtests.py  You can also use the excellent  tox  testing tool to run the tests against all supported versions of Python and Django. Install tox globally, and then simply run:  $ tox", 
            "title": "Testing"
        }, 
        {
            "location": "/#documentation", 
            "text": "To build the documentation, you'll need to install  mkdocs .  $ pip install mkdocs  To preview the documentation:  $ mkdocs serve\nRunning at: http://127.0.0.1:8000/  To build the documentation:  $ mkdocs build", 
            "title": "Documentation"
        }
    ]
}